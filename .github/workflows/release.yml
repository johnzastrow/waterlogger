name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate changelog
      id: changelog
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          tag=${GITHUB_REF#refs/tags/}
          echo "tag=$tag" >> $GITHUB_OUTPUT
          
          # Generate changelog from git log
          changelog=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag }}
        release_name: Waterlogger ${{ steps.changelog.outputs.tag }}
        body: |
          ## Changes
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Downloads
          
          Download the appropriate binary for your platform:
          
          - **Linux**: `waterlogger-${{ steps.changelog.outputs.tag }}-linux-amd64.tar.gz`
          - **Windows**: `waterlogger-${{ steps.changelog.outputs.tag }}-windows-amd64.zip`
          - **macOS**: `waterlogger-${{ steps.changelog.outputs.tag }}-darwin-amd64.tar.gz`
          
          ## Installation
          
          See the [README](https://github.com/your-org/waterlogger#installation) for installation instructions.
          
          ## Docker
          
          ```bash
          docker run -p 2341:2341 waterlogger/waterlogger:${{ steps.changelog.outputs.tag }}
          ```
        draft: false
        prerelease: false

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            asset_name: waterlogger-linux-amd64
          - goos: linux
            goarch: arm64
            asset_name: waterlogger-linux-arm64
          - goos: windows
            goarch: amd64
            asset_name: waterlogger-windows-amd64
          - goos: darwin
            goarch: amd64
            asset_name: waterlogger-darwin-amd64
          - goos: darwin
            goarch: arm64
            asset_name: waterlogger-darwin-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist/${{ matrix.asset_name }}
        
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/${{ matrix.asset_name }}/waterlogger.exe ./cmd/waterlogger
        else
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/${{ matrix.asset_name }}/waterlogger ./cmd/waterlogger
        fi
        
        # Copy additional files
        cp README.md dist/${{ matrix.asset_name }}/
        cp LICENSE dist/${{ matrix.asset_name }}/
        cp CHANGELOG.md dist/${{ matrix.asset_name }}/
        cp config.example.yaml dist/${{ matrix.asset_name }}/
        
        # Create archive
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r ${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.zip ${{ matrix.asset_name }}/
        else
          tar -czf ${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.tar.gz ${{ matrix.asset_name }}/
        fi
    
    - name: Upload Linux Release Asset
      if: matrix.goos == 'linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_name: ${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Windows Release Asset
      if: matrix.goos == 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.zip
        asset_name: ${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.zip
        asset_content_type: application/zip
    
    - name: Upload macOS Release Asset
      if: matrix.goos == 'darwin'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_name: ${{ matrix.asset_name }}-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip

  docker-release:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          waterlogger/waterlogger:${{ steps.version.outputs.VERSION }}
          waterlogger/waterlogger:latest
        labels: |
          org.opencontainers.image.title=Waterlogger
          org.opencontainers.image.description=Pool and Hot Tub Water Management System
          org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.source=https://github.com/your-org/waterlogger
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max